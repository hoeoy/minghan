<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ks.app.dao.ABeautyDiaryDao">

	<!-- 通过订单id查看是否有日记 -->
	<select id="hasDiaryByOrderId" parameterType="string" resultType="java.lang.Integer">
		SELECT if(count(id)>0,1,0)
		FROM beauty_diary
		WHERE order_id = #{orderId} and del_flag = '0'
	</select>

<resultMap type="ABeautyDiary" id="ABeautyDiaryMap">
	<result property="id" column="id"/>
	<result property="createDate" column="create_date"/>
	<result property="createBy.id" column="create_by"/>
	<result property="createBy.name" column="create_name"/>
	<result property="authorId" column="create_by"/>
	<result property="authorName" column="create_name"/>
	<result property="diary" column="diary"/>
	<result property="orderId" column="order_id"/>
	<result property="type" column="type"/>
	<result property="authorMinPhoto" column="min_photo"/>
</resultMap>
<sql id="bdColumns">
    	t.id,
    	t.diary,
    	t.create_by,
    	t.create_date,
    	t.order_id,
		u.name as create_name,
		u.min_photo 
    </sql>
<insert id="addDiary" parameterType="com.ks.app.entity.ABeautyDiary">
	insert into beauty_diary (id,author_name,diary,create_by,create_date,order_id,type) values (#{id},#{authorName},#{diary},#{curUserId},#{createDate},#{orderId},#{type})
</insert>
<insert id="addDiaryImg" parameterType="com.ks.app.entity.DiaryImg">
	insert into diary_img (
	id,
	diary_id,
	flag,
	sort,
	create_by,
	create_date,
	img_path) values(
	#{id},
	#{diaryId},
	#{flag},
	#{sort},
	#{curUserId},
	#{createDate},
	#{imgPath}
	)
</insert>
<select id="getAll"  resultMap="ABeautyDiaryMap">
	select <include refid="bdColumns"/> from beauty_diary t left join sys_user u on u.id=t.create_by
	where t.del_flag = '0'
	<if test="type != null and type != '' ">
	and type = #{type}
	</if>
	 order by t.create_date desc limit #{n},#{s} 
</select>
<select id="getBeforeOneById" parameterType="String" resultType="String">
	select img_path from diary_img where diary_id=#{id} And flag=0 order by sort asc,id asc limit 1
</select>
<select id="getAfterOneById" parameterType="String" resultType="String">
	select img_path from diary_img where diary_id=#{id} And flag=1 order by sort asc,id asc limit 1
</select>
<select id="getAllOfUser" parameterType="String" resultType="com.ks.app.entity.ABeautyDiary">
	select * from beauty_diary where author_id=#{id} order by create_date desc,id desc
</select>
<select id="getBeforeByDiaryId" parameterType="String" resultType="com.ks.app.entity.DiaryImg">
	select * from diary_img where diary_id = #{id} And flag='0' order by sort asc,id desc
</select>
<select id="getAfterByDiaryId" parameterType="String" resultType="com.ks.app.entity.DiaryImg">
	select * from diary_img where diary_id = #{id} And flag='1' order by sort asc,id desc
</select>
<select id="getBDpage" resultType="int">
	select ifnull(count(id),0) from beauty_diary
</select>

<select id="getByOrderId" parameterType="String"  resultMap="ABeautyDiaryMap">
	select <include refid="bdColumns"/> from beauty_diary t left join sys_user u on u.id=t.create_by where order_id = #{id}
</select>

<select id="getByOUId" parameterType="String"  resultType="String">
	select id from beauty_diary where order_id = #{orderId} and create_by = #{userId}
</select>

</mapper>